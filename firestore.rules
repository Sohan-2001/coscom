/**
 * @file Cosmic Insights - Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all data within the Cosmic Insights application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/birthCharts/{birthChartId}: Stores birth chart data for a specific user.
 * - /users/{userId}/palmReadings/{palmReadingId}: Stores palm reading data for a specific user.
 * - /users/{userId}/vedicReadings/{vedicReadingId}: Stores Vedic reading data for a specific user.
 *
 * Key Security Decisions:
 * - User data is segregated under the /users/{userId} path, ensuring that users can only access their own data.
 * - No public data access is allowed. All data requires authentication.
 * - List operations are restricted to the owner for user-scoped subcollections.
 * - The rules do NOT enforce a strict schema to allow for rapid prototyping and data model iteration.
 *
 * Authorization Independence:
 * To maintain authorization independence and avoid costly `get()` calls, the data structure is designed such that access control can be determined solely based on the request path and the authenticated user's ID. All data is nested under user-specific paths (e.g., `/users/{userId}`), allowing for simple `isOwner(userId)` checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get) - User with ID 'user123' can read their profile if authenticated as 'user123'.
     * @allow (update) - User with ID 'user123' can update their profile if authenticated as 'user123'.
     * @allow (delete) - User with ID 'user123' can delete their profile if authenticated as 'user123'.
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) - User with ID 'user456' cannot read the profile of 'user123'.
     * @deny (update) - User with ID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) - User with ID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own profile, but only if the userId in the path matches their auth ID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false; // Users should not be able to list all user profiles.
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id; // Enforce immutability of userId.
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to birth chart data for a specific user.
     * @path /users/{userId}/birthCharts/{birthChartId}
     * @allow (create) - User with ID 'user123' can create a birth chart under their profile.
     * @allow (get) - User with ID 'user123' can read a birth chart under their profile.
     * @allow (update) - User with ID 'user123' can update a birth chart under their profile.
     * @allow (delete) - User with ID 'user123' can delete a birth chart under their profile.
     * @deny (create) - User with ID 'user456' cannot create a birth chart under 'user123'.
     * @deny (get) - User with ID 'user456' cannot read a birth chart under 'user123'.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/birthCharts/{birthChartId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to palm reading data for a specific user.
     * @path /users/{userId}/palmReadings/{palmReadingId}
     * @allow (create) - User with ID 'user123' can create a palm reading under their profile.
     * @allow (get) - User with ID 'user123' can read a palm reading under their profile.
     * @allow (update) - User with ID 'user123' can update a palm reading under their profile.
     * @allow (delete) - User with ID 'user123' can delete a palm reading under their profile.
     * @deny (create) - User with ID 'user456' cannot create a palm reading under 'user123'.
     * @deny (get) - User with ID 'user456' cannot read a palm reading under 'user123'.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/palmReadings/{palmReadingId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to Vedic reading data for a specific user.
     * @path /users/{userId}/vedicReadings/{vedicReadingId}
     * @allow (create) - User with ID 'user123' can create a Vedic reading under their profile.
     * @allow (get) - User with ID 'user123' can read a Vedic reading under their profile.
     * @allow (update) - User with ID 'user123' can update a Vedic reading under their profile.
     * @allow (delete) - User with ID 'user123' can delete a Vedic reading under their profile.
     * @deny (create) - User with ID 'user456' cannot create a Vedic reading under 'user123'.
     * @deny (get) - User with ID 'user456' cannot read a Vedic reading under 'user123'.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/vedicReadings/{vedicReadingId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}