/**
 * @fileOverview Firestore Security Rules for Cosmic Insights App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and associated horoscopes.
 * Public read access is granted to compatibility data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the user themselves.
 * - /users/{userId}/horoscopes/{horoscopeId}: Stores horoscopes for each user. Access is restricted to the owning user.
 * - /compatibility/{compatibilityId}: Stores compatibility data, which is publicly readable.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's authentication status and UID.
 * - Compatibility data is considered public and is readable by anyone.
 * - Listing of horoscopes is allowed only for the owner of the horoscopes.
 * - Listing of compatibility data is allowed for all users.
 * - Denormalization is used for the horoscopes collection, duplicating the userId, which is validated during creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can read, update, or delete their own profile if the userId matches their auth.uid.
     * @deny (create, get, update, delete) - Any other user attempting to create, read, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific horoscope entries.
     * @path /users/{userId}/horoscopes/{horoscopeId}
     * @allow (create) - Authenticated user can create a horoscope entry under their own user ID.
     * @allow (get, list) - Authenticated user can read or list horoscope entries under their own user ID.
     * @allow (update, delete) - Authenticated user can update or delete their own horoscope entries.
     * @deny (create, get, update, delete) - Any other user attempting to create, read, update, or delete horoscopes under another user's ID.
     * @principle Enforces document ownership for horoscope entries within a user's profile.
     */
    match /users/{userId}/horoscopes/{horoscopeId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to compatibility data. This data is considered public and readable by all.
     * @path /compatibility/{compatibilityId}
     * @allow (get, list) - Any user can read the compatibility data.
     * @deny (create, update, delete) - No user can create, update, or delete compatibility data.
     * @principle Allows public read access for compatibility information.
     */
    match /compatibility/{compatibilityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}