/**
 * @file Firebase Security Rules for Cosmic Insights Application
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model.  Each user
 *   has full control over their own profile, readings, and orders.
 *
 * @dataStructure
 *   - /users/{userId}: Stores user profile data.
 *   - /users/{userId}/readings/{readingId}: Stores individual reading data for a user.
 *   - /users/{userId}/orders/{orderId}: Stores order information for a user.
 *
 * @keySecurityDecisions
 *   - Users can only access their own data.  Listing all users is disallowed.
 *   - All write operations (create, update, delete) require the user to be the owner of the resource.
 *
 * @denormalizationForAuthorization Not applicable. The data structure is already designed for
 *   efficient path-based authorization. No additional denormalization is required.
 *
 * @structuralSegregation Not applicable. No public vs. private data segregation is needed based on
 *   the current data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID "user123" can create their profile.
     * @allow (get) User with ID "user123" can read their profile.
     * @allow (update) User with ID "user123" can update their profile.
     * @allow (delete) User with ID "user123" can delete their profile.
     * @deny (create) User with ID "user456" cannot create a profile for user "user123".
     * @deny (get) User with ID "user456" cannot read the profile of user "user123".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific readings.
     * @path /users/{userId}/readings/{readingId}
     * @allow (create) User with ID "user123" can create a reading under their profile.
     * @allow (get) User with ID "user123" can read a reading under their profile.
     * @allow (update) User with ID "user123" can update a reading under their profile.
     * @allow (delete) User with ID "user123" can delete a reading under their profile.
     * @deny (create) User with ID "user456" cannot create a reading under the profile of user "user123".
     * @deny (get) User with ID "user456" cannot read a reading under the profile of user "user123".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/readings/{readingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID "user123" can create an order under their profile.
     * @allow (get) User with ID "user123" can read an order under their profile.
     * @allow (update) User with ID "user123" can update an order under their profile.
     * @allow (delete) User with ID "user123" can delete an order under their profile.
     * @deny (create) User with ID "user456" cannot create an order under the profile of user "user123".
     * @deny (get) User with ID "user456" cannot read an order under the profile of user "user123".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}