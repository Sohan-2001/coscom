/**
 * @file Firebase Security Rules for Cosmic Insights Application
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model.  Users can only
 * create, read, update, and delete their own data, which is nested under their
 * respective `/users/{userId}` path. Listing other user documents or top-level
 * collections is explicitly denied.
 *
 * @dataStructure The data is structured hierarchically:
 *   - `/users/{userId}`: User profile information.
 *   - `/users/{userId}/readings/{readingId}`:  Reading data associated with a user.
 *   - `/users/{userId}/orders/{orderId}`: Order information associated with a user.
 *
 * @keySecurityDecisions
 *   - **User Listing Denied**: Listing the `/users` collection is explicitly denied to prevent unauthorized access to user data.
 *   - **Ownership Enforcement**: All data access is controlled by the `userId` in the path, ensuring that only the authenticated user can access their own data.
 *   - **No Schema Validation**: Data validation is relaxed to allow for rapid prototyping.  However, fields critical for authorization (like `userId`) are validated for relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users collection. Only the owner can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'user123', email: 'test@example.com', creationDate: '2024-01-01' }
     * @allow (get) User with ID 'user123' can read their own profile.
     *   - auth: { uid: 'user123' }
     * @allow (update) User with ID 'user123' can update their own profile.
     *   - auth: { uid: 'user123' }
     * @allow (delete) User with ID 'user123' can delete their own profile.
     *   - auth: { uid: 'user123' }
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     *   - auth: { uid: 'user456' }
     *   - request.resource.data: { id: 'user123', email: 'test@example.com' }
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     *   - auth: { uid: 'user456' }
     * @deny (list) Listing all users is not allowed.
     *   - auth: { uid: 'user123' }
     * @principle Enforces path-based ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      // isSignedIn() checks if the request is authenticated
      allow get: if isSignedIn() && isOwner(userId);
      // List is disabled on the user collection.
      allow list: if false;
      // Allow the user to create their own profile, but require that the ID matches their auth ID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/readings collection. Only the owner can create, read, update, and delete readings.
     * @path /users/{userId}/readings/{readingId}
     * @allow (create) User with ID 'user123' can create a reading under their profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', ... }
     * @allow (get) User with ID 'user123' can read a reading under their profile.
     *   - auth: { uid: 'user123' }
     * @allow (list) User with ID 'user123' can list readings under their profile.
     *   - auth: { uid: 'user123' }
     * @allow (update) User with ID 'user123' can update a reading under their profile.
     *   - auth: { uid: 'user123' }
     * @allow (delete) User with ID 'user123' can delete a reading under their profile.
     *   - auth: { uid: 'user123' }
     * @deny (create) User with ID 'user456' cannot create a reading under user 'user123'.
     *   - auth: { uid: 'user456' }
     *   - request.resource.data: { userId: 'user123', ... }
     * @principle Enforces path-based ownership for reading data.
     */
    match /users/{userId}/readings/{readingId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/orders collection. Only the owner can create, read, update, and delete orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID 'user123' can create an order under their profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', ... }
     * @allow (get) User with ID 'user123' can read an order under their profile.
     *   - auth: { uid: 'user123' }
     * @allow (list) User with ID 'user123' can list orders under their profile.
     *   - auth: { uid: 'user123' }
     * @allow (update) User with ID 'user123' can update an order under their profile.
     *   - auth: { uid: 'user123' }
     * @allow (delete) User with ID 'user123' can delete an order under their profile.
     *   - auth: { uid: 'user123' }
     * @deny (create) User with ID 'user456' cannot create an order under user 'user123'.
     *   - auth: { uid: 'user456' }
     *   - request.resource.data: { userId: 'user123', ... }
     * @principle Enforces path-based ownership for order data.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource based on the path
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of an *existing* resource based on the path
  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}